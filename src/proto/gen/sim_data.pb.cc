// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sim_data.proto

#include "sim_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_sim_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AircraftControls_sim_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sim_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AircraftInfo_sim_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sim_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AircraftMiscSystem_sim_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sim_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Avionics_sim_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sim_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CourseDeviationIndicator_sim_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sim_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EngineData_sim_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sim_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameData_sim_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sim_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HorizontalSituationIndicator_sim_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sim_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Instrument_sim_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sim_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RadioChannel_sim_5fdata_2eproto;
namespace flight_panel {
class SimDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimData> _instance;
} _SimData_default_instance_;
class AircraftInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AircraftInfo> _instance;
} _AircraftInfo_default_instance_;
class AvionicsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Avionics> _instance;
} _Avionics_default_instance_;
class RadioChannelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RadioChannel> _instance;
} _RadioChannel_default_instance_;
class CourseDeviationIndicatorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CourseDeviationIndicator> _instance;
} _CourseDeviationIndicator_default_instance_;
class AircraftMiscSystemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AircraftMiscSystem> _instance;
} _AircraftMiscSystem_default_instance_;
class EngineDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EngineData> _instance;
} _EngineData_default_instance_;
class InstrumentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Instrument> _instance;
} _Instrument_default_instance_;
class AircraftControlsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AircraftControls> _instance;
} _AircraftControls_default_instance_;
class GameDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameData> _instance;
} _GameData_default_instance_;
class NavigationSystemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NavigationSystem> _instance;
} _NavigationSystem_default_instance_;
class HorizontalSituationIndicatorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HorizontalSituationIndicator> _instance;
} _HorizontalSituationIndicator_default_instance_;
}  // namespace flight_panel
static void InitDefaultsscc_info_AircraftControls_sim_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flight_panel::_AircraftControls_default_instance_;
    new (ptr) ::flight_panel::AircraftControls();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flight_panel::AircraftControls::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AircraftControls_sim_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AircraftControls_sim_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_AircraftInfo_sim_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flight_panel::_AircraftInfo_default_instance_;
    new (ptr) ::flight_panel::AircraftInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flight_panel::AircraftInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AircraftInfo_sim_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AircraftInfo_sim_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_AircraftMiscSystem_sim_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flight_panel::_AircraftMiscSystem_default_instance_;
    new (ptr) ::flight_panel::AircraftMiscSystem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flight_panel::AircraftMiscSystem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AircraftMiscSystem_sim_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AircraftMiscSystem_sim_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_Avionics_sim_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flight_panel::_Avionics_default_instance_;
    new (ptr) ::flight_panel::Avionics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flight_panel::Avionics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Avionics_sim_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Avionics_sim_5fdata_2eproto}, {
      &scc_info_CourseDeviationIndicator_sim_5fdata_2eproto.base,
      &scc_info_RadioChannel_sim_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_CourseDeviationIndicator_sim_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flight_panel::_CourseDeviationIndicator_default_instance_;
    new (ptr) ::flight_panel::CourseDeviationIndicator();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flight_panel::CourseDeviationIndicator::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CourseDeviationIndicator_sim_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CourseDeviationIndicator_sim_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_EngineData_sim_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flight_panel::_EngineData_default_instance_;
    new (ptr) ::flight_panel::EngineData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flight_panel::EngineData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EngineData_sim_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EngineData_sim_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_GameData_sim_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flight_panel::_GameData_default_instance_;
    new (ptr) ::flight_panel::GameData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flight_panel::GameData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameData_sim_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameData_sim_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_HorizontalSituationIndicator_sim_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flight_panel::_HorizontalSituationIndicator_default_instance_;
    new (ptr) ::flight_panel::HorizontalSituationIndicator();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flight_panel::HorizontalSituationIndicator::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HorizontalSituationIndicator_sim_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HorizontalSituationIndicator_sim_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_Instrument_sim_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flight_panel::_Instrument_default_instance_;
    new (ptr) ::flight_panel::Instrument();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flight_panel::Instrument::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Instrument_sim_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Instrument_sim_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_NavigationSystem_sim_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flight_panel::_NavigationSystem_default_instance_;
    new (ptr) ::flight_panel::NavigationSystem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flight_panel::NavigationSystem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NavigationSystem_sim_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NavigationSystem_sim_5fdata_2eproto}, {
      &scc_info_HorizontalSituationIndicator_sim_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_RadioChannel_sim_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flight_panel::_RadioChannel_default_instance_;
    new (ptr) ::flight_panel::RadioChannel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flight_panel::RadioChannel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RadioChannel_sim_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RadioChannel_sim_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_SimData_sim_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flight_panel::_SimData_default_instance_;
    new (ptr) ::flight_panel::SimData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flight_panel::SimData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_SimData_sim_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_SimData_sim_5fdata_2eproto}, {
      &scc_info_AircraftInfo_sim_5fdata_2eproto.base,
      &scc_info_Avionics_sim_5fdata_2eproto.base,
      &scc_info_AircraftMiscSystem_sim_5fdata_2eproto.base,
      &scc_info_EngineData_sim_5fdata_2eproto.base,
      &scc_info_Instrument_sim_5fdata_2eproto.base,
      &scc_info_AircraftControls_sim_5fdata_2eproto.base,
      &scc_info_GameData_sim_5fdata_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sim_5fdata_2eproto[12];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_sim_5fdata_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sim_5fdata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_sim_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flight_panel::SimData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flight_panel::SimData, aircraft_info_),
  PROTOBUF_FIELD_OFFSET(::flight_panel::SimData, avionics_),
  PROTOBUF_FIELD_OFFSET(::flight_panel::SimData, aircraft_misc_data_),
  PROTOBUF_FIELD_OFFSET(::flight_panel::SimData, engine_data_),
  PROTOBUF_FIELD_OFFSET(::flight_panel::SimData, instruments_),
  PROTOBUF_FIELD_OFFSET(::flight_panel::SimData, aircraft_controls_),
  PROTOBUF_FIELD_OFFSET(::flight_panel::SimData, game_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flight_panel::AircraftInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flight_panel::AircraftInfo, model_),
  PROTOBUF_FIELD_OFFSET(::flight_panel::AircraftInfo, call_sign_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flight_panel::Avionics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flight_panel::Avionics, cdi_1_),
  PROTOBUF_FIELD_OFFSET(::flight_panel::Avionics, cdi_2_),
  PROTOBUF_FIELD_OFFSET(::flight_panel::Avionics, adi_radial_),
  PROTOBUF_FIELD_OFFSET(::flight_panel::Avionics, nav_radio_1_),
  PROTOBUF_FIELD_OFFSET(::flight_panel::Avionics, nav_radio_2_),
  PROTOBUF_FIELD_OFFSET(::flight_panel::Avionics, com_radio_1_),
  PROTOBUF_FIELD_OFFSET(::flight_panel::Avionics, com_radio_2_),
  PROTOBUF_FIELD_OFFSET(::flight_panel::Avionics, adf_radio_),
  PROTOBUF_FIELD_OFFSET(::flight_panel::Avionics, transponder_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flight_panel::RadioChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flight_panel::RadioChannel, active_freq_),
  PROTOBUF_FIELD_OFFSET(::flight_panel::RadioChannel, standby_freq_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flight_panel::CourseDeviationIndicator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flight_panel::CourseDeviationIndicator, obs_deg_),
  PROTOBUF_FIELD_OFFSET(::flight_panel::CourseDeviationIndicator, radial_error_),
  PROTOBUF_FIELD_OFFSET(::flight_panel::CourseDeviationIndicator, glide_slope_error_),
  PROTOBUF_FIELD_OFFSET(::flight_panel::CourseDeviationIndicator, direction_),
  PROTOBUF_FIELD_OFFSET(::flight_panel::CourseDeviationIndicator, glisdeslope_flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flight_panel::AircraftMiscSystem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flight_panel::AircraftMiscSystem, battery_bus_volt_),
  PROTOBUF_FIELD_OFFSET(::flight_panel::AircraftMiscSystem, ambient_temp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flight_panel::EngineData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flight_panel::EngineData, rpm_),
  PROTOBUF_FIELD_OFFSET(::flight_panel::EngineData, rpm_ambiemt_pct_),
  PROTOBUF_FIELD_OFFSET(::flight_panel::EngineData, engine_elapsed_time_),
  PROTOBUF_FIELD_OFFSET(::flight_panel::EngineData, fuel_left_level_),
  PROTOBUF_FIELD_OFFSET(::flight_panel::EngineData, fuel_right_level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flight_panel::Instrument, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flight_panel::Instrument, indicated_altitude_),
  PROTOBUF_FIELD_OFFSET(::flight_panel::Instrument, kohlsman_setting_hg_),
  PROTOBUF_FIELD_OFFSET(::flight_panel::Instrument, vertical_speed_),
  PROTOBUF_FIELD_OFFSET(::flight_panel::Instrument, pitch_angle_),
  PROTOBUF_FIELD_OFFSET(::flight_panel::Instrument, bank_angle_),
  PROTOBUF_FIELD_OFFSET(::flight_panel::Instrument, indicated_airspeed_),
  PROTOBUF_FIELD_OFFSET(::flight_panel::Instrument, true_airspeed_),
  PROTOBUF_FIELD_OFFSET(::flight_panel::Instrument, mach_speed_),
  PROTOBUF_FIELD_OFFSET(::flight_panel::Instrument, turn_indicator_rate_),
  PROTOBUF_FIELD_OFFSET(::flight_panel::Instrument, turn_coordinator_ball_),
  PROTOBUF_FIELD_OFFSET(::flight_panel::Instrument, heading_indicator_deg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flight_panel::AircraftControls, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flight_panel::AircraftControls, elevator_trim_indicator_),
  PROTOBUF_FIELD_OFFSET(::flight_panel::AircraftControls, flaps_count_),
  PROTOBUF_FIELD_OFFSET(::flight_panel::AircraftControls, flaps_pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flight_panel::GameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flight_panel::GameData, connected_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flight_panel::NavigationSystem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flight_panel::NavigationSystem, active_nav_source_),
  PROTOBUF_FIELD_OFFSET(::flight_panel::NavigationSystem, hsi_1_),
  PROTOBUF_FIELD_OFFSET(::flight_panel::NavigationSystem, hsi_2_),
  PROTOBUF_FIELD_OFFSET(::flight_panel::NavigationSystem, next_waypoint_distance_),
  PROTOBUF_FIELD_OFFSET(::flight_panel::NavigationSystem, next_waypoint_name_),
  PROTOBUF_FIELD_OFFSET(::flight_panel::NavigationSystem, last_waypoint_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flight_panel::HorizontalSituationIndicator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flight_panel::HorizontalSituationIndicator, course_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::flight_panel::SimData)},
  { 12, -1, sizeof(::flight_panel::AircraftInfo)},
  { 19, -1, sizeof(::flight_panel::Avionics)},
  { 33, -1, sizeof(::flight_panel::RadioChannel)},
  { 40, -1, sizeof(::flight_panel::CourseDeviationIndicator)},
  { 50, -1, sizeof(::flight_panel::AircraftMiscSystem)},
  { 57, -1, sizeof(::flight_panel::EngineData)},
  { 67, -1, sizeof(::flight_panel::Instrument)},
  { 83, -1, sizeof(::flight_panel::AircraftControls)},
  { 91, -1, sizeof(::flight_panel::GameData)},
  { 97, -1, sizeof(::flight_panel::NavigationSystem)},
  { 108, -1, sizeof(::flight_panel::HorizontalSituationIndicator)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flight_panel::_SimData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flight_panel::_AircraftInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flight_panel::_Avionics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flight_panel::_RadioChannel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flight_panel::_CourseDeviationIndicator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flight_panel::_AircraftMiscSystem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flight_panel::_EngineData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flight_panel::_Instrument_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flight_panel::_AircraftControls_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flight_panel::_GameData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flight_panel::_NavigationSystem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flight_panel::_HorizontalSituationIndicator_default_instance_),
};

const char descriptor_table_protodef_sim_5fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016sim_data.proto\022\014flight_panel\"\350\002\n\007SimDa"
  "ta\0221\n\raircraft_info\030\001 \001(\0132\032.flight_panel"
  ".AircraftInfo\022(\n\010avionics\030\002 \001(\0132\026.flight"
  "_panel.Avionics\022<\n\022aircraft_misc_data\030\003 "
  "\001(\0132 .flight_panel.AircraftMiscSystem\022-\n"
  "\013engine_data\030\004 \001(\0132\030.flight_panel.Engine"
  "Data\022-\n\013instruments\030\005 \001(\0132\030.flight_panel"
  ".Instrument\0229\n\021aircraft_controls\030\006 \001(\0132\036"
  ".flight_panel.AircraftControls\022)\n\tgame_d"
  "ata\030\007 \001(\0132\026.flight_panel.GameData\"0\n\014Air"
  "craftInfo\022\r\n\005model\030\001 \001(\t\022\021\n\tcall_sign\030\002 "
  "\001(\t\"\231\003\n\010Avionics\0225\n\005cdi_1\030\001 \001(\0132&.flight"
  "_panel.CourseDeviationIndicator\0225\n\005cdi_2"
  "\030\002 \001(\0132&.flight_panel.CourseDeviationInd"
  "icator\022\022\n\nadi_radial\030\003 \001(\001\022/\n\013nav_radio_"
  "1\030\004 \001(\0132\032.flight_panel.RadioChannel\022/\n\013n"
  "av_radio_2\030\005 \001(\0132\032.flight_panel.RadioCha"
  "nnel\022/\n\013com_radio_1\030\006 \001(\0132\032.flight_panel"
  ".RadioChannel\022/\n\013com_radio_2\030\007 \001(\0132\032.fli"
  "ght_panel.RadioChannel\022-\n\tadf_radio\030\010 \001("
  "\0132\032.flight_panel.RadioChannel\022\030\n\020transpo"
  "nder_code\030\t \001(\t\"9\n\014RadioChannel\022\023\n\013activ"
  "e_freq\030\001 \001(\001\022\024\n\014standby_freq\030\002 \001(\001\"\363\001\n\030C"
  "ourseDeviationIndicator\022\017\n\007obs_deg\030\001 \001(\001"
  "\022\024\n\014radial_error\030\002 \001(\001\022\031\n\021glide_slope_er"
  "ror\030\003 \001(\001\022C\n\tdirection\030\004 \001(\01620.flight_pa"
  "nel.CourseDeviationIndicator.Direction\022\030"
  "\n\020glisdeslope_flag\030\005 \001(\010\"6\n\tDirection\022\017\n"
  "\013DIR_UNKNOWN\020\000\022\n\n\006DIR_TO\020\001\022\014\n\010DIR_FROM\020\002"
  "\"D\n\022AircraftMiscSystem\022\030\n\020battery_bus_vo"
  "lt\030\001 \001(\001\022\024\n\014ambient_temp\030\002 \001(\001\"\202\001\n\nEngin"
  "eData\022\013\n\003rpm\030\001 \001(\001\022\027\n\017rpm_ambiemt_pct\030\002 "
  "\001(\001\022\033\n\023engine_elapsed_time\030\003 \001(\001\022\027\n\017fuel"
  "_left_level\030\004 \001(\001\022\030\n\020fuel_right_level\030\005 "
  "\001(\001\"\250\002\n\nInstrument\022\032\n\022indicated_altitude"
  "\030\001 \001(\001\022\033\n\023kohlsman_setting_hg\030\002 \001(\001\022\026\n\016v"
  "ertical_speed\030\003 \001(\001\022\023\n\013pitch_angle\030\004 \001(\001"
  "\022\022\n\nbank_angle\030\005 \001(\001\022\032\n\022indicated_airspe"
  "ed\030\006 \001(\001\022\025\n\rtrue_airspeed\030\007 \001(\001\022\022\n\nmach_"
  "speed\030\010 \001(\001\022\033\n\023turn_indicator_rate\030\t \001(\001"
  "\022\035\n\025turn_coordinator_ball\030\n \001(\001\022\035\n\025headi"
  "ng_indicator_deg\030\013 \001(\001\"[\n\020AircraftContro"
  "ls\022\037\n\027elevator_trim_indicator\030\001 \001(\001\022\023\n\013f"
  "laps_count\030\002 \001(\005\022\021\n\tflaps_pos\030\003 \001(\005\"\035\n\010G"
  "ameData\022\021\n\tconnected\030\001 \001(\010\"\364\002\n\020Navigatio"
  "nSystem\022C\n\021active_nav_source\030\001 \001(\0162(.fli"
  "ght_panel.NavigationSystem.NavSource\0229\n\005"
  "hsi_1\030\002 \001(\0132*.flight_panel.HorizontalSit"
  "uationIndicator\0229\n\005hsi_2\030\003 \001(\0132*.flight_"
  "panel.HorizontalSituationIndicator\022\036\n\026ne"
  "xt_waypoint_distance\030\023 \001(\001\022\032\n\022next_waypo"
  "int_name\030\024 \001(\t\022\032\n\022last_waypoint_name\030\025 \001"
  "(\t\"M\n\tNavSource\022\017\n\013NAV_UNKNOWN\020\000\022\020\n\014NAV_"
  "SOURCE_1\020\001\022\020\n\014NAV_SOURCE_2\020\002\022\013\n\007NAV_FMS\020"
  "\003\".\n\034HorizontalSituationIndicator\022\016\n\006cou"
  "rse\030\001 \001(\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sim_5fdata_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_sim_5fdata_2eproto_sccs[12] = {
  &scc_info_AircraftControls_sim_5fdata_2eproto.base,
  &scc_info_AircraftInfo_sim_5fdata_2eproto.base,
  &scc_info_AircraftMiscSystem_sim_5fdata_2eproto.base,
  &scc_info_Avionics_sim_5fdata_2eproto.base,
  &scc_info_CourseDeviationIndicator_sim_5fdata_2eproto.base,
  &scc_info_EngineData_sim_5fdata_2eproto.base,
  &scc_info_GameData_sim_5fdata_2eproto.base,
  &scc_info_HorizontalSituationIndicator_sim_5fdata_2eproto.base,
  &scc_info_Instrument_sim_5fdata_2eproto.base,
  &scc_info_NavigationSystem_sim_5fdata_2eproto.base,
  &scc_info_RadioChannel_sim_5fdata_2eproto.base,
  &scc_info_SimData_sim_5fdata_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sim_5fdata_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sim_5fdata_2eproto = {
  false, false, descriptor_table_protodef_sim_5fdata_2eproto, "sim_data.proto", 2217,
  &descriptor_table_sim_5fdata_2eproto_once, descriptor_table_sim_5fdata_2eproto_sccs, descriptor_table_sim_5fdata_2eproto_deps, 12, 0,
  schemas, file_default_instances, TableStruct_sim_5fdata_2eproto::offsets,
  file_level_metadata_sim_5fdata_2eproto, 12, file_level_enum_descriptors_sim_5fdata_2eproto, file_level_service_descriptors_sim_5fdata_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_sim_5fdata_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_sim_5fdata_2eproto)), true);
namespace flight_panel {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CourseDeviationIndicator_Direction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sim_5fdata_2eproto);
  return file_level_enum_descriptors_sim_5fdata_2eproto[0];
}
bool CourseDeviationIndicator_Direction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CourseDeviationIndicator_Direction CourseDeviationIndicator::DIR_UNKNOWN;
constexpr CourseDeviationIndicator_Direction CourseDeviationIndicator::DIR_TO;
constexpr CourseDeviationIndicator_Direction CourseDeviationIndicator::DIR_FROM;
constexpr CourseDeviationIndicator_Direction CourseDeviationIndicator::Direction_MIN;
constexpr CourseDeviationIndicator_Direction CourseDeviationIndicator::Direction_MAX;
constexpr int CourseDeviationIndicator::Direction_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NavigationSystem_NavSource_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sim_5fdata_2eproto);
  return file_level_enum_descriptors_sim_5fdata_2eproto[1];
}
bool NavigationSystem_NavSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr NavigationSystem_NavSource NavigationSystem::NAV_UNKNOWN;
constexpr NavigationSystem_NavSource NavigationSystem::NAV_SOURCE_1;
constexpr NavigationSystem_NavSource NavigationSystem::NAV_SOURCE_2;
constexpr NavigationSystem_NavSource NavigationSystem::NAV_FMS;
constexpr NavigationSystem_NavSource NavigationSystem::NavSource_MIN;
constexpr NavigationSystem_NavSource NavigationSystem::NavSource_MAX;
constexpr int NavigationSystem::NavSource_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void SimData::InitAsDefaultInstance() {
  ::flight_panel::_SimData_default_instance_._instance.get_mutable()->aircraft_info_ = const_cast< ::flight_panel::AircraftInfo*>(
      ::flight_panel::AircraftInfo::internal_default_instance());
  ::flight_panel::_SimData_default_instance_._instance.get_mutable()->avionics_ = const_cast< ::flight_panel::Avionics*>(
      ::flight_panel::Avionics::internal_default_instance());
  ::flight_panel::_SimData_default_instance_._instance.get_mutable()->aircraft_misc_data_ = const_cast< ::flight_panel::AircraftMiscSystem*>(
      ::flight_panel::AircraftMiscSystem::internal_default_instance());
  ::flight_panel::_SimData_default_instance_._instance.get_mutable()->engine_data_ = const_cast< ::flight_panel::EngineData*>(
      ::flight_panel::EngineData::internal_default_instance());
  ::flight_panel::_SimData_default_instance_._instance.get_mutable()->instruments_ = const_cast< ::flight_panel::Instrument*>(
      ::flight_panel::Instrument::internal_default_instance());
  ::flight_panel::_SimData_default_instance_._instance.get_mutable()->aircraft_controls_ = const_cast< ::flight_panel::AircraftControls*>(
      ::flight_panel::AircraftControls::internal_default_instance());
  ::flight_panel::_SimData_default_instance_._instance.get_mutable()->game_data_ = const_cast< ::flight_panel::GameData*>(
      ::flight_panel::GameData::internal_default_instance());
}
class SimData::_Internal {
 public:
  static const ::flight_panel::AircraftInfo& aircraft_info(const SimData* msg);
  static const ::flight_panel::Avionics& avionics(const SimData* msg);
  static const ::flight_panel::AircraftMiscSystem& aircraft_misc_data(const SimData* msg);
  static const ::flight_panel::EngineData& engine_data(const SimData* msg);
  static const ::flight_panel::Instrument& instruments(const SimData* msg);
  static const ::flight_panel::AircraftControls& aircraft_controls(const SimData* msg);
  static const ::flight_panel::GameData& game_data(const SimData* msg);
};

const ::flight_panel::AircraftInfo&
SimData::_Internal::aircraft_info(const SimData* msg) {
  return *msg->aircraft_info_;
}
const ::flight_panel::Avionics&
SimData::_Internal::avionics(const SimData* msg) {
  return *msg->avionics_;
}
const ::flight_panel::AircraftMiscSystem&
SimData::_Internal::aircraft_misc_data(const SimData* msg) {
  return *msg->aircraft_misc_data_;
}
const ::flight_panel::EngineData&
SimData::_Internal::engine_data(const SimData* msg) {
  return *msg->engine_data_;
}
const ::flight_panel::Instrument&
SimData::_Internal::instruments(const SimData* msg) {
  return *msg->instruments_;
}
const ::flight_panel::AircraftControls&
SimData::_Internal::aircraft_controls(const SimData* msg) {
  return *msg->aircraft_controls_;
}
const ::flight_panel::GameData&
SimData::_Internal::game_data(const SimData* msg) {
  return *msg->game_data_;
}
SimData::SimData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flight_panel.SimData)
}
SimData::SimData(const SimData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_aircraft_info()) {
    aircraft_info_ = new ::flight_panel::AircraftInfo(*from.aircraft_info_);
  } else {
    aircraft_info_ = nullptr;
  }
  if (from._internal_has_avionics()) {
    avionics_ = new ::flight_panel::Avionics(*from.avionics_);
  } else {
    avionics_ = nullptr;
  }
  if (from._internal_has_aircraft_misc_data()) {
    aircraft_misc_data_ = new ::flight_panel::AircraftMiscSystem(*from.aircraft_misc_data_);
  } else {
    aircraft_misc_data_ = nullptr;
  }
  if (from._internal_has_engine_data()) {
    engine_data_ = new ::flight_panel::EngineData(*from.engine_data_);
  } else {
    engine_data_ = nullptr;
  }
  if (from._internal_has_instruments()) {
    instruments_ = new ::flight_panel::Instrument(*from.instruments_);
  } else {
    instruments_ = nullptr;
  }
  if (from._internal_has_aircraft_controls()) {
    aircraft_controls_ = new ::flight_panel::AircraftControls(*from.aircraft_controls_);
  } else {
    aircraft_controls_ = nullptr;
  }
  if (from._internal_has_game_data()) {
    game_data_ = new ::flight_panel::GameData(*from.game_data_);
  } else {
    game_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flight_panel.SimData)
}

void SimData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimData_sim_5fdata_2eproto.base);
  ::memset(&aircraft_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_data_) -
      reinterpret_cast<char*>(&aircraft_info_)) + sizeof(game_data_));
}

SimData::~SimData() {
  // @@protoc_insertion_point(destructor:flight_panel.SimData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete aircraft_info_;
  if (this != internal_default_instance()) delete avionics_;
  if (this != internal_default_instance()) delete aircraft_misc_data_;
  if (this != internal_default_instance()) delete engine_data_;
  if (this != internal_default_instance()) delete instruments_;
  if (this != internal_default_instance()) delete aircraft_controls_;
  if (this != internal_default_instance()) delete game_data_;
}

void SimData::ArenaDtor(void* object) {
  SimData* _this = reinterpret_cast< SimData* >(object);
  (void)_this;
}
void SimData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimData& SimData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimData_sim_5fdata_2eproto.base);
  return *internal_default_instance();
}


void SimData::Clear() {
// @@protoc_insertion_point(message_clear_start:flight_panel.SimData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && aircraft_info_ != nullptr) {
    delete aircraft_info_;
  }
  aircraft_info_ = nullptr;
  if (GetArena() == nullptr && avionics_ != nullptr) {
    delete avionics_;
  }
  avionics_ = nullptr;
  if (GetArena() == nullptr && aircraft_misc_data_ != nullptr) {
    delete aircraft_misc_data_;
  }
  aircraft_misc_data_ = nullptr;
  if (GetArena() == nullptr && engine_data_ != nullptr) {
    delete engine_data_;
  }
  engine_data_ = nullptr;
  if (GetArena() == nullptr && instruments_ != nullptr) {
    delete instruments_;
  }
  instruments_ = nullptr;
  if (GetArena() == nullptr && aircraft_controls_ != nullptr) {
    delete aircraft_controls_;
  }
  aircraft_controls_ = nullptr;
  if (GetArena() == nullptr && game_data_ != nullptr) {
    delete game_data_;
  }
  game_data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .flight_panel.AircraftInfo aircraft_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_aircraft_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .flight_panel.Avionics avionics = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_avionics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .flight_panel.AircraftMiscSystem aircraft_misc_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_aircraft_misc_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .flight_panel.EngineData engine_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_engine_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .flight_panel.Instrument instruments = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_instruments(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .flight_panel.AircraftControls aircraft_controls = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_aircraft_controls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .flight_panel.GameData game_data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flight_panel.SimData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flight_panel.AircraftInfo aircraft_info = 1;
  if (this->has_aircraft_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::aircraft_info(this), target, stream);
  }

  // .flight_panel.Avionics avionics = 2;
  if (this->has_avionics()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::avionics(this), target, stream);
  }

  // .flight_panel.AircraftMiscSystem aircraft_misc_data = 3;
  if (this->has_aircraft_misc_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::aircraft_misc_data(this), target, stream);
  }

  // .flight_panel.EngineData engine_data = 4;
  if (this->has_engine_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::engine_data(this), target, stream);
  }

  // .flight_panel.Instrument instruments = 5;
  if (this->has_instruments()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::instruments(this), target, stream);
  }

  // .flight_panel.AircraftControls aircraft_controls = 6;
  if (this->has_aircraft_controls()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::aircraft_controls(this), target, stream);
  }

  // .flight_panel.GameData game_data = 7;
  if (this->has_game_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::game_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flight_panel.SimData)
  return target;
}

size_t SimData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flight_panel.SimData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flight_panel.AircraftInfo aircraft_info = 1;
  if (this->has_aircraft_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *aircraft_info_);
  }

  // .flight_panel.Avionics avionics = 2;
  if (this->has_avionics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *avionics_);
  }

  // .flight_panel.AircraftMiscSystem aircraft_misc_data = 3;
  if (this->has_aircraft_misc_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *aircraft_misc_data_);
  }

  // .flight_panel.EngineData engine_data = 4;
  if (this->has_engine_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *engine_data_);
  }

  // .flight_panel.Instrument instruments = 5;
  if (this->has_instruments()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *instruments_);
  }

  // .flight_panel.AircraftControls aircraft_controls = 6;
  if (this->has_aircraft_controls()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *aircraft_controls_);
  }

  // .flight_panel.GameData game_data = 7;
  if (this->has_game_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *game_data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flight_panel.SimData)
  GOOGLE_DCHECK_NE(&from, this);
  const SimData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flight_panel.SimData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flight_panel.SimData)
    MergeFrom(*source);
  }
}

void SimData::MergeFrom(const SimData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flight_panel.SimData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_aircraft_info()) {
    _internal_mutable_aircraft_info()->::flight_panel::AircraftInfo::MergeFrom(from._internal_aircraft_info());
  }
  if (from.has_avionics()) {
    _internal_mutable_avionics()->::flight_panel::Avionics::MergeFrom(from._internal_avionics());
  }
  if (from.has_aircraft_misc_data()) {
    _internal_mutable_aircraft_misc_data()->::flight_panel::AircraftMiscSystem::MergeFrom(from._internal_aircraft_misc_data());
  }
  if (from.has_engine_data()) {
    _internal_mutable_engine_data()->::flight_panel::EngineData::MergeFrom(from._internal_engine_data());
  }
  if (from.has_instruments()) {
    _internal_mutable_instruments()->::flight_panel::Instrument::MergeFrom(from._internal_instruments());
  }
  if (from.has_aircraft_controls()) {
    _internal_mutable_aircraft_controls()->::flight_panel::AircraftControls::MergeFrom(from._internal_aircraft_controls());
  }
  if (from.has_game_data()) {
    _internal_mutable_game_data()->::flight_panel::GameData::MergeFrom(from._internal_game_data());
  }
}

void SimData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flight_panel.SimData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimData::CopyFrom(const SimData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flight_panel.SimData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimData::IsInitialized() const {
  return true;
}

void SimData::InternalSwap(SimData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimData, game_data_)
      + sizeof(SimData::game_data_)
      - PROTOBUF_FIELD_OFFSET(SimData, aircraft_info_)>(
          reinterpret_cast<char*>(&aircraft_info_),
          reinterpret_cast<char*>(&other->aircraft_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AircraftInfo::InitAsDefaultInstance() {
}
class AircraftInfo::_Internal {
 public:
};

AircraftInfo::AircraftInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flight_panel.AircraftInfo)
}
AircraftInfo::AircraftInfo(const AircraftInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model().empty()) {
    model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_model(),
      GetArena());
  }
  call_sign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_call_sign().empty()) {
    call_sign_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_call_sign(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:flight_panel.AircraftInfo)
}

void AircraftInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AircraftInfo_sim_5fdata_2eproto.base);
  model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  call_sign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AircraftInfo::~AircraftInfo() {
  // @@protoc_insertion_point(destructor:flight_panel.AircraftInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AircraftInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  call_sign_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AircraftInfo::ArenaDtor(void* object) {
  AircraftInfo* _this = reinterpret_cast< AircraftInfo* >(object);
  (void)_this;
}
void AircraftInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AircraftInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AircraftInfo& AircraftInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AircraftInfo_sim_5fdata_2eproto.base);
  return *internal_default_instance();
}


void AircraftInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:flight_panel.AircraftInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  call_sign_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AircraftInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string model = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_model();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flight_panel.AircraftInfo.model"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string call_sign = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_call_sign();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flight_panel.AircraftInfo.call_sign"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AircraftInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flight_panel.AircraftInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model = 1;
  if (this->model().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flight_panel.AircraftInfo.model");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_model(), target);
  }

  // string call_sign = 2;
  if (this->call_sign().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_call_sign().data(), static_cast<int>(this->_internal_call_sign().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flight_panel.AircraftInfo.call_sign");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_call_sign(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flight_panel.AircraftInfo)
  return target;
}

size_t AircraftInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flight_panel.AircraftInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model = 1;
  if (this->model().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model());
  }

  // string call_sign = 2;
  if (this->call_sign().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_call_sign());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AircraftInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flight_panel.AircraftInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AircraftInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AircraftInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flight_panel.AircraftInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flight_panel.AircraftInfo)
    MergeFrom(*source);
  }
}

void AircraftInfo::MergeFrom(const AircraftInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flight_panel.AircraftInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model().size() > 0) {
    _internal_set_model(from._internal_model());
  }
  if (from.call_sign().size() > 0) {
    _internal_set_call_sign(from._internal_call_sign());
  }
}

void AircraftInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flight_panel.AircraftInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AircraftInfo::CopyFrom(const AircraftInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flight_panel.AircraftInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AircraftInfo::IsInitialized() const {
  return true;
}

void AircraftInfo::InternalSwap(AircraftInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  model_.Swap(&other->model_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  call_sign_.Swap(&other->call_sign_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AircraftInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Avionics::InitAsDefaultInstance() {
  ::flight_panel::_Avionics_default_instance_._instance.get_mutable()->cdi_1_ = const_cast< ::flight_panel::CourseDeviationIndicator*>(
      ::flight_panel::CourseDeviationIndicator::internal_default_instance());
  ::flight_panel::_Avionics_default_instance_._instance.get_mutable()->cdi_2_ = const_cast< ::flight_panel::CourseDeviationIndicator*>(
      ::flight_panel::CourseDeviationIndicator::internal_default_instance());
  ::flight_panel::_Avionics_default_instance_._instance.get_mutable()->nav_radio_1_ = const_cast< ::flight_panel::RadioChannel*>(
      ::flight_panel::RadioChannel::internal_default_instance());
  ::flight_panel::_Avionics_default_instance_._instance.get_mutable()->nav_radio_2_ = const_cast< ::flight_panel::RadioChannel*>(
      ::flight_panel::RadioChannel::internal_default_instance());
  ::flight_panel::_Avionics_default_instance_._instance.get_mutable()->com_radio_1_ = const_cast< ::flight_panel::RadioChannel*>(
      ::flight_panel::RadioChannel::internal_default_instance());
  ::flight_panel::_Avionics_default_instance_._instance.get_mutable()->com_radio_2_ = const_cast< ::flight_panel::RadioChannel*>(
      ::flight_panel::RadioChannel::internal_default_instance());
  ::flight_panel::_Avionics_default_instance_._instance.get_mutable()->adf_radio_ = const_cast< ::flight_panel::RadioChannel*>(
      ::flight_panel::RadioChannel::internal_default_instance());
}
class Avionics::_Internal {
 public:
  static const ::flight_panel::CourseDeviationIndicator& cdi_1(const Avionics* msg);
  static const ::flight_panel::CourseDeviationIndicator& cdi_2(const Avionics* msg);
  static const ::flight_panel::RadioChannel& nav_radio_1(const Avionics* msg);
  static const ::flight_panel::RadioChannel& nav_radio_2(const Avionics* msg);
  static const ::flight_panel::RadioChannel& com_radio_1(const Avionics* msg);
  static const ::flight_panel::RadioChannel& com_radio_2(const Avionics* msg);
  static const ::flight_panel::RadioChannel& adf_radio(const Avionics* msg);
};

const ::flight_panel::CourseDeviationIndicator&
Avionics::_Internal::cdi_1(const Avionics* msg) {
  return *msg->cdi_1_;
}
const ::flight_panel::CourseDeviationIndicator&
Avionics::_Internal::cdi_2(const Avionics* msg) {
  return *msg->cdi_2_;
}
const ::flight_panel::RadioChannel&
Avionics::_Internal::nav_radio_1(const Avionics* msg) {
  return *msg->nav_radio_1_;
}
const ::flight_panel::RadioChannel&
Avionics::_Internal::nav_radio_2(const Avionics* msg) {
  return *msg->nav_radio_2_;
}
const ::flight_panel::RadioChannel&
Avionics::_Internal::com_radio_1(const Avionics* msg) {
  return *msg->com_radio_1_;
}
const ::flight_panel::RadioChannel&
Avionics::_Internal::com_radio_2(const Avionics* msg) {
  return *msg->com_radio_2_;
}
const ::flight_panel::RadioChannel&
Avionics::_Internal::adf_radio(const Avionics* msg) {
  return *msg->adf_radio_;
}
Avionics::Avionics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flight_panel.Avionics)
}
Avionics::Avionics(const Avionics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  transponder_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transponder_code().empty()) {
    transponder_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_transponder_code(),
      GetArena());
  }
  if (from._internal_has_cdi_1()) {
    cdi_1_ = new ::flight_panel::CourseDeviationIndicator(*from.cdi_1_);
  } else {
    cdi_1_ = nullptr;
  }
  if (from._internal_has_cdi_2()) {
    cdi_2_ = new ::flight_panel::CourseDeviationIndicator(*from.cdi_2_);
  } else {
    cdi_2_ = nullptr;
  }
  if (from._internal_has_nav_radio_1()) {
    nav_radio_1_ = new ::flight_panel::RadioChannel(*from.nav_radio_1_);
  } else {
    nav_radio_1_ = nullptr;
  }
  if (from._internal_has_nav_radio_2()) {
    nav_radio_2_ = new ::flight_panel::RadioChannel(*from.nav_radio_2_);
  } else {
    nav_radio_2_ = nullptr;
  }
  if (from._internal_has_com_radio_1()) {
    com_radio_1_ = new ::flight_panel::RadioChannel(*from.com_radio_1_);
  } else {
    com_radio_1_ = nullptr;
  }
  if (from._internal_has_com_radio_2()) {
    com_radio_2_ = new ::flight_panel::RadioChannel(*from.com_radio_2_);
  } else {
    com_radio_2_ = nullptr;
  }
  if (from._internal_has_adf_radio()) {
    adf_radio_ = new ::flight_panel::RadioChannel(*from.adf_radio_);
  } else {
    adf_radio_ = nullptr;
  }
  adi_radial_ = from.adi_radial_;
  // @@protoc_insertion_point(copy_constructor:flight_panel.Avionics)
}

void Avionics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Avionics_sim_5fdata_2eproto.base);
  transponder_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cdi_1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&adi_radial_) -
      reinterpret_cast<char*>(&cdi_1_)) + sizeof(adi_radial_));
}

Avionics::~Avionics() {
  // @@protoc_insertion_point(destructor:flight_panel.Avionics)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Avionics::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  transponder_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cdi_1_;
  if (this != internal_default_instance()) delete cdi_2_;
  if (this != internal_default_instance()) delete nav_radio_1_;
  if (this != internal_default_instance()) delete nav_radio_2_;
  if (this != internal_default_instance()) delete com_radio_1_;
  if (this != internal_default_instance()) delete com_radio_2_;
  if (this != internal_default_instance()) delete adf_radio_;
}

void Avionics::ArenaDtor(void* object) {
  Avionics* _this = reinterpret_cast< Avionics* >(object);
  (void)_this;
}
void Avionics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Avionics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Avionics& Avionics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Avionics_sim_5fdata_2eproto.base);
  return *internal_default_instance();
}


void Avionics::Clear() {
// @@protoc_insertion_point(message_clear_start:flight_panel.Avionics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transponder_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && cdi_1_ != nullptr) {
    delete cdi_1_;
  }
  cdi_1_ = nullptr;
  if (GetArena() == nullptr && cdi_2_ != nullptr) {
    delete cdi_2_;
  }
  cdi_2_ = nullptr;
  if (GetArena() == nullptr && nav_radio_1_ != nullptr) {
    delete nav_radio_1_;
  }
  nav_radio_1_ = nullptr;
  if (GetArena() == nullptr && nav_radio_2_ != nullptr) {
    delete nav_radio_2_;
  }
  nav_radio_2_ = nullptr;
  if (GetArena() == nullptr && com_radio_1_ != nullptr) {
    delete com_radio_1_;
  }
  com_radio_1_ = nullptr;
  if (GetArena() == nullptr && com_radio_2_ != nullptr) {
    delete com_radio_2_;
  }
  com_radio_2_ = nullptr;
  if (GetArena() == nullptr && adf_radio_ != nullptr) {
    delete adf_radio_;
  }
  adf_radio_ = nullptr;
  adi_radial_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Avionics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .flight_panel.CourseDeviationIndicator cdi_1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cdi_1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .flight_panel.CourseDeviationIndicator cdi_2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cdi_2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double adi_radial = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          adi_radial_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .flight_panel.RadioChannel nav_radio_1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_nav_radio_1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .flight_panel.RadioChannel nav_radio_2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_nav_radio_2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .flight_panel.RadioChannel com_radio_1 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_com_radio_1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .flight_panel.RadioChannel com_radio_2 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_com_radio_2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .flight_panel.RadioChannel adf_radio = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_adf_radio(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string transponder_code = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_transponder_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flight_panel.Avionics.transponder_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Avionics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flight_panel.Avionics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flight_panel.CourseDeviationIndicator cdi_1 = 1;
  if (this->has_cdi_1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::cdi_1(this), target, stream);
  }

  // .flight_panel.CourseDeviationIndicator cdi_2 = 2;
  if (this->has_cdi_2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cdi_2(this), target, stream);
  }

  // double adi_radial = 3;
  if (!(this->adi_radial() <= 0 && this->adi_radial() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_adi_radial(), target);
  }

  // .flight_panel.RadioChannel nav_radio_1 = 4;
  if (this->has_nav_radio_1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::nav_radio_1(this), target, stream);
  }

  // .flight_panel.RadioChannel nav_radio_2 = 5;
  if (this->has_nav_radio_2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::nav_radio_2(this), target, stream);
  }

  // .flight_panel.RadioChannel com_radio_1 = 6;
  if (this->has_com_radio_1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::com_radio_1(this), target, stream);
  }

  // .flight_panel.RadioChannel com_radio_2 = 7;
  if (this->has_com_radio_2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::com_radio_2(this), target, stream);
  }

  // .flight_panel.RadioChannel adf_radio = 8;
  if (this->has_adf_radio()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::adf_radio(this), target, stream);
  }

  // string transponder_code = 9;
  if (this->transponder_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_transponder_code().data(), static_cast<int>(this->_internal_transponder_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flight_panel.Avionics.transponder_code");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_transponder_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flight_panel.Avionics)
  return target;
}

size_t Avionics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flight_panel.Avionics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string transponder_code = 9;
  if (this->transponder_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transponder_code());
  }

  // .flight_panel.CourseDeviationIndicator cdi_1 = 1;
  if (this->has_cdi_1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cdi_1_);
  }

  // .flight_panel.CourseDeviationIndicator cdi_2 = 2;
  if (this->has_cdi_2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cdi_2_);
  }

  // .flight_panel.RadioChannel nav_radio_1 = 4;
  if (this->has_nav_radio_1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nav_radio_1_);
  }

  // .flight_panel.RadioChannel nav_radio_2 = 5;
  if (this->has_nav_radio_2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nav_radio_2_);
  }

  // .flight_panel.RadioChannel com_radio_1 = 6;
  if (this->has_com_radio_1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *com_radio_1_);
  }

  // .flight_panel.RadioChannel com_radio_2 = 7;
  if (this->has_com_radio_2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *com_radio_2_);
  }

  // .flight_panel.RadioChannel adf_radio = 8;
  if (this->has_adf_radio()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *adf_radio_);
  }

  // double adi_radial = 3;
  if (!(this->adi_radial() <= 0 && this->adi_radial() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Avionics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flight_panel.Avionics)
  GOOGLE_DCHECK_NE(&from, this);
  const Avionics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Avionics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flight_panel.Avionics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flight_panel.Avionics)
    MergeFrom(*source);
  }
}

void Avionics::MergeFrom(const Avionics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flight_panel.Avionics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.transponder_code().size() > 0) {
    _internal_set_transponder_code(from._internal_transponder_code());
  }
  if (from.has_cdi_1()) {
    _internal_mutable_cdi_1()->::flight_panel::CourseDeviationIndicator::MergeFrom(from._internal_cdi_1());
  }
  if (from.has_cdi_2()) {
    _internal_mutable_cdi_2()->::flight_panel::CourseDeviationIndicator::MergeFrom(from._internal_cdi_2());
  }
  if (from.has_nav_radio_1()) {
    _internal_mutable_nav_radio_1()->::flight_panel::RadioChannel::MergeFrom(from._internal_nav_radio_1());
  }
  if (from.has_nav_radio_2()) {
    _internal_mutable_nav_radio_2()->::flight_panel::RadioChannel::MergeFrom(from._internal_nav_radio_2());
  }
  if (from.has_com_radio_1()) {
    _internal_mutable_com_radio_1()->::flight_panel::RadioChannel::MergeFrom(from._internal_com_radio_1());
  }
  if (from.has_com_radio_2()) {
    _internal_mutable_com_radio_2()->::flight_panel::RadioChannel::MergeFrom(from._internal_com_radio_2());
  }
  if (from.has_adf_radio()) {
    _internal_mutable_adf_radio()->::flight_panel::RadioChannel::MergeFrom(from._internal_adf_radio());
  }
  if (!(from.adi_radial() <= 0 && from.adi_radial() >= 0)) {
    _internal_set_adi_radial(from._internal_adi_radial());
  }
}

void Avionics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flight_panel.Avionics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Avionics::CopyFrom(const Avionics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flight_panel.Avionics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Avionics::IsInitialized() const {
  return true;
}

void Avionics::InternalSwap(Avionics* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  transponder_code_.Swap(&other->transponder_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Avionics, adi_radial_)
      + sizeof(Avionics::adi_radial_)
      - PROTOBUF_FIELD_OFFSET(Avionics, cdi_1_)>(
          reinterpret_cast<char*>(&cdi_1_),
          reinterpret_cast<char*>(&other->cdi_1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Avionics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RadioChannel::InitAsDefaultInstance() {
}
class RadioChannel::_Internal {
 public:
};

RadioChannel::RadioChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flight_panel.RadioChannel)
}
RadioChannel::RadioChannel(const RadioChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&active_freq_, &from.active_freq_,
    static_cast<size_t>(reinterpret_cast<char*>(&standby_freq_) -
    reinterpret_cast<char*>(&active_freq_)) + sizeof(standby_freq_));
  // @@protoc_insertion_point(copy_constructor:flight_panel.RadioChannel)
}

void RadioChannel::SharedCtor() {
  ::memset(&active_freq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&standby_freq_) -
      reinterpret_cast<char*>(&active_freq_)) + sizeof(standby_freq_));
}

RadioChannel::~RadioChannel() {
  // @@protoc_insertion_point(destructor:flight_panel.RadioChannel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RadioChannel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RadioChannel::ArenaDtor(void* object) {
  RadioChannel* _this = reinterpret_cast< RadioChannel* >(object);
  (void)_this;
}
void RadioChannel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RadioChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RadioChannel& RadioChannel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RadioChannel_sim_5fdata_2eproto.base);
  return *internal_default_instance();
}


void RadioChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:flight_panel.RadioChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&active_freq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&standby_freq_) -
      reinterpret_cast<char*>(&active_freq_)) + sizeof(standby_freq_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadioChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double active_freq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          active_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double standby_freq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          standby_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RadioChannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flight_panel.RadioChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double active_freq = 1;
  if (!(this->active_freq() <= 0 && this->active_freq() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_active_freq(), target);
  }

  // double standby_freq = 2;
  if (!(this->standby_freq() <= 0 && this->standby_freq() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_standby_freq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flight_panel.RadioChannel)
  return target;
}

size_t RadioChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flight_panel.RadioChannel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double active_freq = 1;
  if (!(this->active_freq() <= 0 && this->active_freq() >= 0)) {
    total_size += 1 + 8;
  }

  // double standby_freq = 2;
  if (!(this->standby_freq() <= 0 && this->standby_freq() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RadioChannel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flight_panel.RadioChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const RadioChannel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RadioChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flight_panel.RadioChannel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flight_panel.RadioChannel)
    MergeFrom(*source);
  }
}

void RadioChannel::MergeFrom(const RadioChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flight_panel.RadioChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.active_freq() <= 0 && from.active_freq() >= 0)) {
    _internal_set_active_freq(from._internal_active_freq());
  }
  if (!(from.standby_freq() <= 0 && from.standby_freq() >= 0)) {
    _internal_set_standby_freq(from._internal_standby_freq());
  }
}

void RadioChannel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flight_panel.RadioChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadioChannel::CopyFrom(const RadioChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flight_panel.RadioChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadioChannel::IsInitialized() const {
  return true;
}

void RadioChannel::InternalSwap(RadioChannel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RadioChannel, standby_freq_)
      + sizeof(RadioChannel::standby_freq_)
      - PROTOBUF_FIELD_OFFSET(RadioChannel, active_freq_)>(
          reinterpret_cast<char*>(&active_freq_),
          reinterpret_cast<char*>(&other->active_freq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RadioChannel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CourseDeviationIndicator::InitAsDefaultInstance() {
}
class CourseDeviationIndicator::_Internal {
 public:
};

CourseDeviationIndicator::CourseDeviationIndicator(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flight_panel.CourseDeviationIndicator)
}
CourseDeviationIndicator::CourseDeviationIndicator(const CourseDeviationIndicator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&obs_deg_, &from.obs_deg_,
    static_cast<size_t>(reinterpret_cast<char*>(&glisdeslope_flag_) -
    reinterpret_cast<char*>(&obs_deg_)) + sizeof(glisdeslope_flag_));
  // @@protoc_insertion_point(copy_constructor:flight_panel.CourseDeviationIndicator)
}

void CourseDeviationIndicator::SharedCtor() {
  ::memset(&obs_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&glisdeslope_flag_) -
      reinterpret_cast<char*>(&obs_deg_)) + sizeof(glisdeslope_flag_));
}

CourseDeviationIndicator::~CourseDeviationIndicator() {
  // @@protoc_insertion_point(destructor:flight_panel.CourseDeviationIndicator)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CourseDeviationIndicator::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CourseDeviationIndicator::ArenaDtor(void* object) {
  CourseDeviationIndicator* _this = reinterpret_cast< CourseDeviationIndicator* >(object);
  (void)_this;
}
void CourseDeviationIndicator::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CourseDeviationIndicator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CourseDeviationIndicator& CourseDeviationIndicator::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CourseDeviationIndicator_sim_5fdata_2eproto.base);
  return *internal_default_instance();
}


void CourseDeviationIndicator::Clear() {
// @@protoc_insertion_point(message_clear_start:flight_panel.CourseDeviationIndicator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&obs_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&glisdeslope_flag_) -
      reinterpret_cast<char*>(&obs_deg_)) + sizeof(glisdeslope_flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CourseDeviationIndicator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double obs_deg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          obs_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double radial_error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          radial_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double glide_slope_error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          glide_slope_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .flight_panel.CourseDeviationIndicator.Direction direction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_direction(static_cast<::flight_panel::CourseDeviationIndicator_Direction>(val));
        } else goto handle_unusual;
        continue;
      // bool glisdeslope_flag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          glisdeslope_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CourseDeviationIndicator::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flight_panel.CourseDeviationIndicator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double obs_deg = 1;
  if (!(this->obs_deg() <= 0 && this->obs_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_obs_deg(), target);
  }

  // double radial_error = 2;
  if (!(this->radial_error() <= 0 && this->radial_error() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_radial_error(), target);
  }

  // double glide_slope_error = 3;
  if (!(this->glide_slope_error() <= 0 && this->glide_slope_error() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_glide_slope_error(), target);
  }

  // .flight_panel.CourseDeviationIndicator.Direction direction = 4;
  if (this->direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_direction(), target);
  }

  // bool glisdeslope_flag = 5;
  if (this->glisdeslope_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_glisdeslope_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flight_panel.CourseDeviationIndicator)
  return target;
}

size_t CourseDeviationIndicator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flight_panel.CourseDeviationIndicator)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double obs_deg = 1;
  if (!(this->obs_deg() <= 0 && this->obs_deg() >= 0)) {
    total_size += 1 + 8;
  }

  // double radial_error = 2;
  if (!(this->radial_error() <= 0 && this->radial_error() >= 0)) {
    total_size += 1 + 8;
  }

  // double glide_slope_error = 3;
  if (!(this->glide_slope_error() <= 0 && this->glide_slope_error() >= 0)) {
    total_size += 1 + 8;
  }

  // .flight_panel.CourseDeviationIndicator.Direction direction = 4;
  if (this->direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_direction());
  }

  // bool glisdeslope_flag = 5;
  if (this->glisdeslope_flag() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CourseDeviationIndicator::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flight_panel.CourseDeviationIndicator)
  GOOGLE_DCHECK_NE(&from, this);
  const CourseDeviationIndicator* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CourseDeviationIndicator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flight_panel.CourseDeviationIndicator)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flight_panel.CourseDeviationIndicator)
    MergeFrom(*source);
  }
}

void CourseDeviationIndicator::MergeFrom(const CourseDeviationIndicator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flight_panel.CourseDeviationIndicator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.obs_deg() <= 0 && from.obs_deg() >= 0)) {
    _internal_set_obs_deg(from._internal_obs_deg());
  }
  if (!(from.radial_error() <= 0 && from.radial_error() >= 0)) {
    _internal_set_radial_error(from._internal_radial_error());
  }
  if (!(from.glide_slope_error() <= 0 && from.glide_slope_error() >= 0)) {
    _internal_set_glide_slope_error(from._internal_glide_slope_error());
  }
  if (from.direction() != 0) {
    _internal_set_direction(from._internal_direction());
  }
  if (from.glisdeslope_flag() != 0) {
    _internal_set_glisdeslope_flag(from._internal_glisdeslope_flag());
  }
}

void CourseDeviationIndicator::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flight_panel.CourseDeviationIndicator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CourseDeviationIndicator::CopyFrom(const CourseDeviationIndicator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flight_panel.CourseDeviationIndicator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CourseDeviationIndicator::IsInitialized() const {
  return true;
}

void CourseDeviationIndicator::InternalSwap(CourseDeviationIndicator* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CourseDeviationIndicator, glisdeslope_flag_)
      + sizeof(CourseDeviationIndicator::glisdeslope_flag_)
      - PROTOBUF_FIELD_OFFSET(CourseDeviationIndicator, obs_deg_)>(
          reinterpret_cast<char*>(&obs_deg_),
          reinterpret_cast<char*>(&other->obs_deg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CourseDeviationIndicator::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AircraftMiscSystem::InitAsDefaultInstance() {
}
class AircraftMiscSystem::_Internal {
 public:
};

AircraftMiscSystem::AircraftMiscSystem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flight_panel.AircraftMiscSystem)
}
AircraftMiscSystem::AircraftMiscSystem(const AircraftMiscSystem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&battery_bus_volt_, &from.battery_bus_volt_,
    static_cast<size_t>(reinterpret_cast<char*>(&ambient_temp_) -
    reinterpret_cast<char*>(&battery_bus_volt_)) + sizeof(ambient_temp_));
  // @@protoc_insertion_point(copy_constructor:flight_panel.AircraftMiscSystem)
}

void AircraftMiscSystem::SharedCtor() {
  ::memset(&battery_bus_volt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ambient_temp_) -
      reinterpret_cast<char*>(&battery_bus_volt_)) + sizeof(ambient_temp_));
}

AircraftMiscSystem::~AircraftMiscSystem() {
  // @@protoc_insertion_point(destructor:flight_panel.AircraftMiscSystem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AircraftMiscSystem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AircraftMiscSystem::ArenaDtor(void* object) {
  AircraftMiscSystem* _this = reinterpret_cast< AircraftMiscSystem* >(object);
  (void)_this;
}
void AircraftMiscSystem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AircraftMiscSystem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AircraftMiscSystem& AircraftMiscSystem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AircraftMiscSystem_sim_5fdata_2eproto.base);
  return *internal_default_instance();
}


void AircraftMiscSystem::Clear() {
// @@protoc_insertion_point(message_clear_start:flight_panel.AircraftMiscSystem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&battery_bus_volt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ambient_temp_) -
      reinterpret_cast<char*>(&battery_bus_volt_)) + sizeof(ambient_temp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AircraftMiscSystem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double battery_bus_volt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          battery_bus_volt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double ambient_temp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          ambient_temp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AircraftMiscSystem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flight_panel.AircraftMiscSystem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double battery_bus_volt = 1;
  if (!(this->battery_bus_volt() <= 0 && this->battery_bus_volt() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_battery_bus_volt(), target);
  }

  // double ambient_temp = 2;
  if (!(this->ambient_temp() <= 0 && this->ambient_temp() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_ambient_temp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flight_panel.AircraftMiscSystem)
  return target;
}

size_t AircraftMiscSystem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flight_panel.AircraftMiscSystem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double battery_bus_volt = 1;
  if (!(this->battery_bus_volt() <= 0 && this->battery_bus_volt() >= 0)) {
    total_size += 1 + 8;
  }

  // double ambient_temp = 2;
  if (!(this->ambient_temp() <= 0 && this->ambient_temp() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AircraftMiscSystem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flight_panel.AircraftMiscSystem)
  GOOGLE_DCHECK_NE(&from, this);
  const AircraftMiscSystem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AircraftMiscSystem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flight_panel.AircraftMiscSystem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flight_panel.AircraftMiscSystem)
    MergeFrom(*source);
  }
}

void AircraftMiscSystem::MergeFrom(const AircraftMiscSystem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flight_panel.AircraftMiscSystem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.battery_bus_volt() <= 0 && from.battery_bus_volt() >= 0)) {
    _internal_set_battery_bus_volt(from._internal_battery_bus_volt());
  }
  if (!(from.ambient_temp() <= 0 && from.ambient_temp() >= 0)) {
    _internal_set_ambient_temp(from._internal_ambient_temp());
  }
}

void AircraftMiscSystem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flight_panel.AircraftMiscSystem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AircraftMiscSystem::CopyFrom(const AircraftMiscSystem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flight_panel.AircraftMiscSystem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AircraftMiscSystem::IsInitialized() const {
  return true;
}

void AircraftMiscSystem::InternalSwap(AircraftMiscSystem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AircraftMiscSystem, ambient_temp_)
      + sizeof(AircraftMiscSystem::ambient_temp_)
      - PROTOBUF_FIELD_OFFSET(AircraftMiscSystem, battery_bus_volt_)>(
          reinterpret_cast<char*>(&battery_bus_volt_),
          reinterpret_cast<char*>(&other->battery_bus_volt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AircraftMiscSystem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EngineData::InitAsDefaultInstance() {
}
class EngineData::_Internal {
 public:
};

EngineData::EngineData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flight_panel.EngineData)
}
EngineData::EngineData(const EngineData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&rpm_, &from.rpm_,
    static_cast<size_t>(reinterpret_cast<char*>(&fuel_right_level_) -
    reinterpret_cast<char*>(&rpm_)) + sizeof(fuel_right_level_));
  // @@protoc_insertion_point(copy_constructor:flight_panel.EngineData)
}

void EngineData::SharedCtor() {
  ::memset(&rpm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fuel_right_level_) -
      reinterpret_cast<char*>(&rpm_)) + sizeof(fuel_right_level_));
}

EngineData::~EngineData() {
  // @@protoc_insertion_point(destructor:flight_panel.EngineData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EngineData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EngineData::ArenaDtor(void* object) {
  EngineData* _this = reinterpret_cast< EngineData* >(object);
  (void)_this;
}
void EngineData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EngineData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EngineData& EngineData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EngineData_sim_5fdata_2eproto.base);
  return *internal_default_instance();
}


void EngineData::Clear() {
// @@protoc_insertion_point(message_clear_start:flight_panel.EngineData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&rpm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fuel_right_level_) -
      reinterpret_cast<char*>(&rpm_)) + sizeof(fuel_right_level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EngineData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double rpm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          rpm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double rpm_ambiemt_pct = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          rpm_ambiemt_pct_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double engine_elapsed_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          engine_elapsed_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double fuel_left_level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          fuel_left_level_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double fuel_right_level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          fuel_right_level_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EngineData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flight_panel.EngineData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rpm = 1;
  if (!(this->rpm() <= 0 && this->rpm() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_rpm(), target);
  }

  // double rpm_ambiemt_pct = 2;
  if (!(this->rpm_ambiemt_pct() <= 0 && this->rpm_ambiemt_pct() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_rpm_ambiemt_pct(), target);
  }

  // double engine_elapsed_time = 3;
  if (!(this->engine_elapsed_time() <= 0 && this->engine_elapsed_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_engine_elapsed_time(), target);
  }

  // double fuel_left_level = 4;
  if (!(this->fuel_left_level() <= 0 && this->fuel_left_level() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_fuel_left_level(), target);
  }

  // double fuel_right_level = 5;
  if (!(this->fuel_right_level() <= 0 && this->fuel_right_level() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_fuel_right_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flight_panel.EngineData)
  return target;
}

size_t EngineData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flight_panel.EngineData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rpm = 1;
  if (!(this->rpm() <= 0 && this->rpm() >= 0)) {
    total_size += 1 + 8;
  }

  // double rpm_ambiemt_pct = 2;
  if (!(this->rpm_ambiemt_pct() <= 0 && this->rpm_ambiemt_pct() >= 0)) {
    total_size += 1 + 8;
  }

  // double engine_elapsed_time = 3;
  if (!(this->engine_elapsed_time() <= 0 && this->engine_elapsed_time() >= 0)) {
    total_size += 1 + 8;
  }

  // double fuel_left_level = 4;
  if (!(this->fuel_left_level() <= 0 && this->fuel_left_level() >= 0)) {
    total_size += 1 + 8;
  }

  // double fuel_right_level = 5;
  if (!(this->fuel_right_level() <= 0 && this->fuel_right_level() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EngineData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flight_panel.EngineData)
  GOOGLE_DCHECK_NE(&from, this);
  const EngineData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EngineData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flight_panel.EngineData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flight_panel.EngineData)
    MergeFrom(*source);
  }
}

void EngineData::MergeFrom(const EngineData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flight_panel.EngineData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.rpm() <= 0 && from.rpm() >= 0)) {
    _internal_set_rpm(from._internal_rpm());
  }
  if (!(from.rpm_ambiemt_pct() <= 0 && from.rpm_ambiemt_pct() >= 0)) {
    _internal_set_rpm_ambiemt_pct(from._internal_rpm_ambiemt_pct());
  }
  if (!(from.engine_elapsed_time() <= 0 && from.engine_elapsed_time() >= 0)) {
    _internal_set_engine_elapsed_time(from._internal_engine_elapsed_time());
  }
  if (!(from.fuel_left_level() <= 0 && from.fuel_left_level() >= 0)) {
    _internal_set_fuel_left_level(from._internal_fuel_left_level());
  }
  if (!(from.fuel_right_level() <= 0 && from.fuel_right_level() >= 0)) {
    _internal_set_fuel_right_level(from._internal_fuel_right_level());
  }
}

void EngineData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flight_panel.EngineData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EngineData::CopyFrom(const EngineData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flight_panel.EngineData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EngineData::IsInitialized() const {
  return true;
}

void EngineData::InternalSwap(EngineData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EngineData, fuel_right_level_)
      + sizeof(EngineData::fuel_right_level_)
      - PROTOBUF_FIELD_OFFSET(EngineData, rpm_)>(
          reinterpret_cast<char*>(&rpm_),
          reinterpret_cast<char*>(&other->rpm_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EngineData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Instrument::InitAsDefaultInstance() {
}
class Instrument::_Internal {
 public:
};

Instrument::Instrument(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flight_panel.Instrument)
}
Instrument::Instrument(const Instrument& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&indicated_altitude_, &from.indicated_altitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&heading_indicator_deg_) -
    reinterpret_cast<char*>(&indicated_altitude_)) + sizeof(heading_indicator_deg_));
  // @@protoc_insertion_point(copy_constructor:flight_panel.Instrument)
}

void Instrument::SharedCtor() {
  ::memset(&indicated_altitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heading_indicator_deg_) -
      reinterpret_cast<char*>(&indicated_altitude_)) + sizeof(heading_indicator_deg_));
}

Instrument::~Instrument() {
  // @@protoc_insertion_point(destructor:flight_panel.Instrument)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Instrument::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Instrument::ArenaDtor(void* object) {
  Instrument* _this = reinterpret_cast< Instrument* >(object);
  (void)_this;
}
void Instrument::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Instrument::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Instrument& Instrument::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Instrument_sim_5fdata_2eproto.base);
  return *internal_default_instance();
}


void Instrument::Clear() {
// @@protoc_insertion_point(message_clear_start:flight_panel.Instrument)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&indicated_altitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heading_indicator_deg_) -
      reinterpret_cast<char*>(&indicated_altitude_)) + sizeof(heading_indicator_deg_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Instrument::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double indicated_altitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          indicated_altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double kohlsman_setting_hg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          kohlsman_setting_hg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double vertical_speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          vertical_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pitch_angle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          pitch_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double bank_angle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          bank_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double indicated_airspeed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          indicated_airspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double true_airspeed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          true_airspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double mach_speed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          mach_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double turn_indicator_rate = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          turn_indicator_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double turn_coordinator_ball = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          turn_coordinator_ball_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double heading_indicator_deg = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          heading_indicator_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Instrument::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flight_panel.Instrument)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double indicated_altitude = 1;
  if (!(this->indicated_altitude() <= 0 && this->indicated_altitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_indicated_altitude(), target);
  }

  // double kohlsman_setting_hg = 2;
  if (!(this->kohlsman_setting_hg() <= 0 && this->kohlsman_setting_hg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_kohlsman_setting_hg(), target);
  }

  // double vertical_speed = 3;
  if (!(this->vertical_speed() <= 0 && this->vertical_speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_vertical_speed(), target);
  }

  // double pitch_angle = 4;
  if (!(this->pitch_angle() <= 0 && this->pitch_angle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_pitch_angle(), target);
  }

  // double bank_angle = 5;
  if (!(this->bank_angle() <= 0 && this->bank_angle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_bank_angle(), target);
  }

  // double indicated_airspeed = 6;
  if (!(this->indicated_airspeed() <= 0 && this->indicated_airspeed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_indicated_airspeed(), target);
  }

  // double true_airspeed = 7;
  if (!(this->true_airspeed() <= 0 && this->true_airspeed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_true_airspeed(), target);
  }

  // double mach_speed = 8;
  if (!(this->mach_speed() <= 0 && this->mach_speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_mach_speed(), target);
  }

  // double turn_indicator_rate = 9;
  if (!(this->turn_indicator_rate() <= 0 && this->turn_indicator_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_turn_indicator_rate(), target);
  }

  // double turn_coordinator_ball = 10;
  if (!(this->turn_coordinator_ball() <= 0 && this->turn_coordinator_ball() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_turn_coordinator_ball(), target);
  }

  // double heading_indicator_deg = 11;
  if (!(this->heading_indicator_deg() <= 0 && this->heading_indicator_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_heading_indicator_deg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flight_panel.Instrument)
  return target;
}

size_t Instrument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flight_panel.Instrument)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double indicated_altitude = 1;
  if (!(this->indicated_altitude() <= 0 && this->indicated_altitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double kohlsman_setting_hg = 2;
  if (!(this->kohlsman_setting_hg() <= 0 && this->kohlsman_setting_hg() >= 0)) {
    total_size += 1 + 8;
  }

  // double vertical_speed = 3;
  if (!(this->vertical_speed() <= 0 && this->vertical_speed() >= 0)) {
    total_size += 1 + 8;
  }

  // double pitch_angle = 4;
  if (!(this->pitch_angle() <= 0 && this->pitch_angle() >= 0)) {
    total_size += 1 + 8;
  }

  // double bank_angle = 5;
  if (!(this->bank_angle() <= 0 && this->bank_angle() >= 0)) {
    total_size += 1 + 8;
  }

  // double indicated_airspeed = 6;
  if (!(this->indicated_airspeed() <= 0 && this->indicated_airspeed() >= 0)) {
    total_size += 1 + 8;
  }

  // double true_airspeed = 7;
  if (!(this->true_airspeed() <= 0 && this->true_airspeed() >= 0)) {
    total_size += 1 + 8;
  }

  // double mach_speed = 8;
  if (!(this->mach_speed() <= 0 && this->mach_speed() >= 0)) {
    total_size += 1 + 8;
  }

  // double turn_indicator_rate = 9;
  if (!(this->turn_indicator_rate() <= 0 && this->turn_indicator_rate() >= 0)) {
    total_size += 1 + 8;
  }

  // double turn_coordinator_ball = 10;
  if (!(this->turn_coordinator_ball() <= 0 && this->turn_coordinator_ball() >= 0)) {
    total_size += 1 + 8;
  }

  // double heading_indicator_deg = 11;
  if (!(this->heading_indicator_deg() <= 0 && this->heading_indicator_deg() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Instrument::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flight_panel.Instrument)
  GOOGLE_DCHECK_NE(&from, this);
  const Instrument* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Instrument>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flight_panel.Instrument)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flight_panel.Instrument)
    MergeFrom(*source);
  }
}

void Instrument::MergeFrom(const Instrument& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flight_panel.Instrument)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.indicated_altitude() <= 0 && from.indicated_altitude() >= 0)) {
    _internal_set_indicated_altitude(from._internal_indicated_altitude());
  }
  if (!(from.kohlsman_setting_hg() <= 0 && from.kohlsman_setting_hg() >= 0)) {
    _internal_set_kohlsman_setting_hg(from._internal_kohlsman_setting_hg());
  }
  if (!(from.vertical_speed() <= 0 && from.vertical_speed() >= 0)) {
    _internal_set_vertical_speed(from._internal_vertical_speed());
  }
  if (!(from.pitch_angle() <= 0 && from.pitch_angle() >= 0)) {
    _internal_set_pitch_angle(from._internal_pitch_angle());
  }
  if (!(from.bank_angle() <= 0 && from.bank_angle() >= 0)) {
    _internal_set_bank_angle(from._internal_bank_angle());
  }
  if (!(from.indicated_airspeed() <= 0 && from.indicated_airspeed() >= 0)) {
    _internal_set_indicated_airspeed(from._internal_indicated_airspeed());
  }
  if (!(from.true_airspeed() <= 0 && from.true_airspeed() >= 0)) {
    _internal_set_true_airspeed(from._internal_true_airspeed());
  }
  if (!(from.mach_speed() <= 0 && from.mach_speed() >= 0)) {
    _internal_set_mach_speed(from._internal_mach_speed());
  }
  if (!(from.turn_indicator_rate() <= 0 && from.turn_indicator_rate() >= 0)) {
    _internal_set_turn_indicator_rate(from._internal_turn_indicator_rate());
  }
  if (!(from.turn_coordinator_ball() <= 0 && from.turn_coordinator_ball() >= 0)) {
    _internal_set_turn_coordinator_ball(from._internal_turn_coordinator_ball());
  }
  if (!(from.heading_indicator_deg() <= 0 && from.heading_indicator_deg() >= 0)) {
    _internal_set_heading_indicator_deg(from._internal_heading_indicator_deg());
  }
}

void Instrument::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flight_panel.Instrument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Instrument::CopyFrom(const Instrument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flight_panel.Instrument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Instrument::IsInitialized() const {
  return true;
}

void Instrument::InternalSwap(Instrument* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Instrument, heading_indicator_deg_)
      + sizeof(Instrument::heading_indicator_deg_)
      - PROTOBUF_FIELD_OFFSET(Instrument, indicated_altitude_)>(
          reinterpret_cast<char*>(&indicated_altitude_),
          reinterpret_cast<char*>(&other->indicated_altitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Instrument::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AircraftControls::InitAsDefaultInstance() {
}
class AircraftControls::_Internal {
 public:
};

AircraftControls::AircraftControls(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flight_panel.AircraftControls)
}
AircraftControls::AircraftControls(const AircraftControls& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&elevator_trim_indicator_, &from.elevator_trim_indicator_,
    static_cast<size_t>(reinterpret_cast<char*>(&flaps_pos_) -
    reinterpret_cast<char*>(&elevator_trim_indicator_)) + sizeof(flaps_pos_));
  // @@protoc_insertion_point(copy_constructor:flight_panel.AircraftControls)
}

void AircraftControls::SharedCtor() {
  ::memset(&elevator_trim_indicator_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flaps_pos_) -
      reinterpret_cast<char*>(&elevator_trim_indicator_)) + sizeof(flaps_pos_));
}

AircraftControls::~AircraftControls() {
  // @@protoc_insertion_point(destructor:flight_panel.AircraftControls)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AircraftControls::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AircraftControls::ArenaDtor(void* object) {
  AircraftControls* _this = reinterpret_cast< AircraftControls* >(object);
  (void)_this;
}
void AircraftControls::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AircraftControls::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AircraftControls& AircraftControls::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AircraftControls_sim_5fdata_2eproto.base);
  return *internal_default_instance();
}


void AircraftControls::Clear() {
// @@protoc_insertion_point(message_clear_start:flight_panel.AircraftControls)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&elevator_trim_indicator_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flaps_pos_) -
      reinterpret_cast<char*>(&elevator_trim_indicator_)) + sizeof(flaps_pos_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AircraftControls::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double elevator_trim_indicator = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          elevator_trim_indicator_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 flaps_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          flaps_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 flaps_pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          flaps_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AircraftControls::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flight_panel.AircraftControls)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double elevator_trim_indicator = 1;
  if (!(this->elevator_trim_indicator() <= 0 && this->elevator_trim_indicator() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_elevator_trim_indicator(), target);
  }

  // int32 flaps_count = 2;
  if (this->flaps_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_flaps_count(), target);
  }

  // int32 flaps_pos = 3;
  if (this->flaps_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_flaps_pos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flight_panel.AircraftControls)
  return target;
}

size_t AircraftControls::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flight_panel.AircraftControls)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double elevator_trim_indicator = 1;
  if (!(this->elevator_trim_indicator() <= 0 && this->elevator_trim_indicator() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 flaps_count = 2;
  if (this->flaps_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_flaps_count());
  }

  // int32 flaps_pos = 3;
  if (this->flaps_pos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_flaps_pos());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AircraftControls::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flight_panel.AircraftControls)
  GOOGLE_DCHECK_NE(&from, this);
  const AircraftControls* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AircraftControls>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flight_panel.AircraftControls)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flight_panel.AircraftControls)
    MergeFrom(*source);
  }
}

void AircraftControls::MergeFrom(const AircraftControls& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flight_panel.AircraftControls)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.elevator_trim_indicator() <= 0 && from.elevator_trim_indicator() >= 0)) {
    _internal_set_elevator_trim_indicator(from._internal_elevator_trim_indicator());
  }
  if (from.flaps_count() != 0) {
    _internal_set_flaps_count(from._internal_flaps_count());
  }
  if (from.flaps_pos() != 0) {
    _internal_set_flaps_pos(from._internal_flaps_pos());
  }
}

void AircraftControls::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flight_panel.AircraftControls)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AircraftControls::CopyFrom(const AircraftControls& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flight_panel.AircraftControls)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AircraftControls::IsInitialized() const {
  return true;
}

void AircraftControls::InternalSwap(AircraftControls* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AircraftControls, flaps_pos_)
      + sizeof(AircraftControls::flaps_pos_)
      - PROTOBUF_FIELD_OFFSET(AircraftControls, elevator_trim_indicator_)>(
          reinterpret_cast<char*>(&elevator_trim_indicator_),
          reinterpret_cast<char*>(&other->elevator_trim_indicator_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AircraftControls::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameData::InitAsDefaultInstance() {
}
class GameData::_Internal {
 public:
};

GameData::GameData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flight_panel.GameData)
}
GameData::GameData(const GameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  connected_ = from.connected_;
  // @@protoc_insertion_point(copy_constructor:flight_panel.GameData)
}

void GameData::SharedCtor() {
  connected_ = false;
}

GameData::~GameData() {
  // @@protoc_insertion_point(destructor:flight_panel.GameData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GameData::ArenaDtor(void* object) {
  GameData* _this = reinterpret_cast< GameData* >(object);
  (void)_this;
}
void GameData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameData& GameData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameData_sim_5fdata_2eproto.base);
  return *internal_default_instance();
}


void GameData::Clear() {
// @@protoc_insertion_point(message_clear_start:flight_panel.GameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  connected_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool connected = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          connected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flight_panel.GameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool connected = 1;
  if (this->connected() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_connected(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flight_panel.GameData)
  return target;
}

size_t GameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flight_panel.GameData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool connected = 1;
  if (this->connected() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flight_panel.GameData)
  GOOGLE_DCHECK_NE(&from, this);
  const GameData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flight_panel.GameData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flight_panel.GameData)
    MergeFrom(*source);
  }
}

void GameData::MergeFrom(const GameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flight_panel.GameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.connected() != 0) {
    _internal_set_connected(from._internal_connected());
  }
}

void GameData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flight_panel.GameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameData::CopyFrom(const GameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flight_panel.GameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameData::IsInitialized() const {
  return true;
}

void GameData::InternalSwap(GameData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(connected_, other->connected_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NavigationSystem::InitAsDefaultInstance() {
  ::flight_panel::_NavigationSystem_default_instance_._instance.get_mutable()->hsi_1_ = const_cast< ::flight_panel::HorizontalSituationIndicator*>(
      ::flight_panel::HorizontalSituationIndicator::internal_default_instance());
  ::flight_panel::_NavigationSystem_default_instance_._instance.get_mutable()->hsi_2_ = const_cast< ::flight_panel::HorizontalSituationIndicator*>(
      ::flight_panel::HorizontalSituationIndicator::internal_default_instance());
}
class NavigationSystem::_Internal {
 public:
  static const ::flight_panel::HorizontalSituationIndicator& hsi_1(const NavigationSystem* msg);
  static const ::flight_panel::HorizontalSituationIndicator& hsi_2(const NavigationSystem* msg);
};

const ::flight_panel::HorizontalSituationIndicator&
NavigationSystem::_Internal::hsi_1(const NavigationSystem* msg) {
  return *msg->hsi_1_;
}
const ::flight_panel::HorizontalSituationIndicator&
NavigationSystem::_Internal::hsi_2(const NavigationSystem* msg) {
  return *msg->hsi_2_;
}
NavigationSystem::NavigationSystem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flight_panel.NavigationSystem)
}
NavigationSystem::NavigationSystem(const NavigationSystem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  next_waypoint_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_next_waypoint_name().empty()) {
    next_waypoint_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_next_waypoint_name(),
      GetArena());
  }
  last_waypoint_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_waypoint_name().empty()) {
    last_waypoint_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_last_waypoint_name(),
      GetArena());
  }
  if (from._internal_has_hsi_1()) {
    hsi_1_ = new ::flight_panel::HorizontalSituationIndicator(*from.hsi_1_);
  } else {
    hsi_1_ = nullptr;
  }
  if (from._internal_has_hsi_2()) {
    hsi_2_ = new ::flight_panel::HorizontalSituationIndicator(*from.hsi_2_);
  } else {
    hsi_2_ = nullptr;
  }
  ::memcpy(&active_nav_source_, &from.active_nav_source_,
    static_cast<size_t>(reinterpret_cast<char*>(&next_waypoint_distance_) -
    reinterpret_cast<char*>(&active_nav_source_)) + sizeof(next_waypoint_distance_));
  // @@protoc_insertion_point(copy_constructor:flight_panel.NavigationSystem)
}

void NavigationSystem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NavigationSystem_sim_5fdata_2eproto.base);
  next_waypoint_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_waypoint_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&hsi_1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&next_waypoint_distance_) -
      reinterpret_cast<char*>(&hsi_1_)) + sizeof(next_waypoint_distance_));
}

NavigationSystem::~NavigationSystem() {
  // @@protoc_insertion_point(destructor:flight_panel.NavigationSystem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NavigationSystem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  next_waypoint_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_waypoint_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hsi_1_;
  if (this != internal_default_instance()) delete hsi_2_;
}

void NavigationSystem::ArenaDtor(void* object) {
  NavigationSystem* _this = reinterpret_cast< NavigationSystem* >(object);
  (void)_this;
}
void NavigationSystem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NavigationSystem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NavigationSystem& NavigationSystem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NavigationSystem_sim_5fdata_2eproto.base);
  return *internal_default_instance();
}


void NavigationSystem::Clear() {
// @@protoc_insertion_point(message_clear_start:flight_panel.NavigationSystem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  next_waypoint_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  last_waypoint_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && hsi_1_ != nullptr) {
    delete hsi_1_;
  }
  hsi_1_ = nullptr;
  if (GetArena() == nullptr && hsi_2_ != nullptr) {
    delete hsi_2_;
  }
  hsi_2_ = nullptr;
  ::memset(&active_nav_source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&next_waypoint_distance_) -
      reinterpret_cast<char*>(&active_nav_source_)) + sizeof(next_waypoint_distance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NavigationSystem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .flight_panel.NavigationSystem.NavSource active_nav_source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_active_nav_source(static_cast<::flight_panel::NavigationSystem_NavSource>(val));
        } else goto handle_unusual;
        continue;
      // .flight_panel.HorizontalSituationIndicator hsi_1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_hsi_1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .flight_panel.HorizontalSituationIndicator hsi_2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_hsi_2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double next_waypoint_distance = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          next_waypoint_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string next_waypoint_name = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_next_waypoint_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flight_panel.NavigationSystem.next_waypoint_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string last_waypoint_name = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_last_waypoint_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flight_panel.NavigationSystem.last_waypoint_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NavigationSystem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flight_panel.NavigationSystem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flight_panel.NavigationSystem.NavSource active_nav_source = 1;
  if (this->active_nav_source() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_active_nav_source(), target);
  }

  // .flight_panel.HorizontalSituationIndicator hsi_1 = 2;
  if (this->has_hsi_1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::hsi_1(this), target, stream);
  }

  // .flight_panel.HorizontalSituationIndicator hsi_2 = 3;
  if (this->has_hsi_2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::hsi_2(this), target, stream);
  }

  // double next_waypoint_distance = 19;
  if (!(this->next_waypoint_distance() <= 0 && this->next_waypoint_distance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->_internal_next_waypoint_distance(), target);
  }

  // string next_waypoint_name = 20;
  if (this->next_waypoint_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_waypoint_name().data(), static_cast<int>(this->_internal_next_waypoint_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flight_panel.NavigationSystem.next_waypoint_name");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_next_waypoint_name(), target);
  }

  // string last_waypoint_name = 21;
  if (this->last_waypoint_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_waypoint_name().data(), static_cast<int>(this->_internal_last_waypoint_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flight_panel.NavigationSystem.last_waypoint_name");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_last_waypoint_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flight_panel.NavigationSystem)
  return target;
}

size_t NavigationSystem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flight_panel.NavigationSystem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string next_waypoint_name = 20;
  if (this->next_waypoint_name().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_waypoint_name());
  }

  // string last_waypoint_name = 21;
  if (this->last_waypoint_name().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_waypoint_name());
  }

  // .flight_panel.HorizontalSituationIndicator hsi_1 = 2;
  if (this->has_hsi_1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hsi_1_);
  }

  // .flight_panel.HorizontalSituationIndicator hsi_2 = 3;
  if (this->has_hsi_2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hsi_2_);
  }

  // .flight_panel.NavigationSystem.NavSource active_nav_source = 1;
  if (this->active_nav_source() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_active_nav_source());
  }

  // double next_waypoint_distance = 19;
  if (!(this->next_waypoint_distance() <= 0 && this->next_waypoint_distance() >= 0)) {
    total_size += 2 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NavigationSystem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flight_panel.NavigationSystem)
  GOOGLE_DCHECK_NE(&from, this);
  const NavigationSystem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NavigationSystem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flight_panel.NavigationSystem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flight_panel.NavigationSystem)
    MergeFrom(*source);
  }
}

void NavigationSystem::MergeFrom(const NavigationSystem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flight_panel.NavigationSystem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.next_waypoint_name().size() > 0) {
    _internal_set_next_waypoint_name(from._internal_next_waypoint_name());
  }
  if (from.last_waypoint_name().size() > 0) {
    _internal_set_last_waypoint_name(from._internal_last_waypoint_name());
  }
  if (from.has_hsi_1()) {
    _internal_mutable_hsi_1()->::flight_panel::HorizontalSituationIndicator::MergeFrom(from._internal_hsi_1());
  }
  if (from.has_hsi_2()) {
    _internal_mutable_hsi_2()->::flight_panel::HorizontalSituationIndicator::MergeFrom(from._internal_hsi_2());
  }
  if (from.active_nav_source() != 0) {
    _internal_set_active_nav_source(from._internal_active_nav_source());
  }
  if (!(from.next_waypoint_distance() <= 0 && from.next_waypoint_distance() >= 0)) {
    _internal_set_next_waypoint_distance(from._internal_next_waypoint_distance());
  }
}

void NavigationSystem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flight_panel.NavigationSystem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavigationSystem::CopyFrom(const NavigationSystem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flight_panel.NavigationSystem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigationSystem::IsInitialized() const {
  return true;
}

void NavigationSystem::InternalSwap(NavigationSystem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  next_waypoint_name_.Swap(&other->next_waypoint_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  last_waypoint_name_.Swap(&other->last_waypoint_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NavigationSystem, next_waypoint_distance_)
      + sizeof(NavigationSystem::next_waypoint_distance_)
      - PROTOBUF_FIELD_OFFSET(NavigationSystem, hsi_1_)>(
          reinterpret_cast<char*>(&hsi_1_),
          reinterpret_cast<char*>(&other->hsi_1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NavigationSystem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HorizontalSituationIndicator::InitAsDefaultInstance() {
}
class HorizontalSituationIndicator::_Internal {
 public:
};

HorizontalSituationIndicator::HorizontalSituationIndicator(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flight_panel.HorizontalSituationIndicator)
}
HorizontalSituationIndicator::HorizontalSituationIndicator(const HorizontalSituationIndicator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  course_ = from.course_;
  // @@protoc_insertion_point(copy_constructor:flight_panel.HorizontalSituationIndicator)
}

void HorizontalSituationIndicator::SharedCtor() {
  course_ = 0;
}

HorizontalSituationIndicator::~HorizontalSituationIndicator() {
  // @@protoc_insertion_point(destructor:flight_panel.HorizontalSituationIndicator)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HorizontalSituationIndicator::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HorizontalSituationIndicator::ArenaDtor(void* object) {
  HorizontalSituationIndicator* _this = reinterpret_cast< HorizontalSituationIndicator* >(object);
  (void)_this;
}
void HorizontalSituationIndicator::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HorizontalSituationIndicator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HorizontalSituationIndicator& HorizontalSituationIndicator::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HorizontalSituationIndicator_sim_5fdata_2eproto.base);
  return *internal_default_instance();
}


void HorizontalSituationIndicator::Clear() {
// @@protoc_insertion_point(message_clear_start:flight_panel.HorizontalSituationIndicator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  course_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HorizontalSituationIndicator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double course = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          course_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HorizontalSituationIndicator::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flight_panel.HorizontalSituationIndicator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double course = 1;
  if (!(this->course() <= 0 && this->course() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_course(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flight_panel.HorizontalSituationIndicator)
  return target;
}

size_t HorizontalSituationIndicator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flight_panel.HorizontalSituationIndicator)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double course = 1;
  if (!(this->course() <= 0 && this->course() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HorizontalSituationIndicator::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flight_panel.HorizontalSituationIndicator)
  GOOGLE_DCHECK_NE(&from, this);
  const HorizontalSituationIndicator* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HorizontalSituationIndicator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flight_panel.HorizontalSituationIndicator)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flight_panel.HorizontalSituationIndicator)
    MergeFrom(*source);
  }
}

void HorizontalSituationIndicator::MergeFrom(const HorizontalSituationIndicator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flight_panel.HorizontalSituationIndicator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.course() <= 0 && from.course() >= 0)) {
    _internal_set_course(from._internal_course());
  }
}

void HorizontalSituationIndicator::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flight_panel.HorizontalSituationIndicator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HorizontalSituationIndicator::CopyFrom(const HorizontalSituationIndicator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flight_panel.HorizontalSituationIndicator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HorizontalSituationIndicator::IsInitialized() const {
  return true;
}

void HorizontalSituationIndicator::InternalSwap(HorizontalSituationIndicator* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(course_, other->course_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HorizontalSituationIndicator::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace flight_panel
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::flight_panel::SimData* Arena::CreateMaybeMessage< ::flight_panel::SimData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flight_panel::SimData >(arena);
}
template<> PROTOBUF_NOINLINE ::flight_panel::AircraftInfo* Arena::CreateMaybeMessage< ::flight_panel::AircraftInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flight_panel::AircraftInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::flight_panel::Avionics* Arena::CreateMaybeMessage< ::flight_panel::Avionics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flight_panel::Avionics >(arena);
}
template<> PROTOBUF_NOINLINE ::flight_panel::RadioChannel* Arena::CreateMaybeMessage< ::flight_panel::RadioChannel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flight_panel::RadioChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::flight_panel::CourseDeviationIndicator* Arena::CreateMaybeMessage< ::flight_panel::CourseDeviationIndicator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flight_panel::CourseDeviationIndicator >(arena);
}
template<> PROTOBUF_NOINLINE ::flight_panel::AircraftMiscSystem* Arena::CreateMaybeMessage< ::flight_panel::AircraftMiscSystem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flight_panel::AircraftMiscSystem >(arena);
}
template<> PROTOBUF_NOINLINE ::flight_panel::EngineData* Arena::CreateMaybeMessage< ::flight_panel::EngineData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flight_panel::EngineData >(arena);
}
template<> PROTOBUF_NOINLINE ::flight_panel::Instrument* Arena::CreateMaybeMessage< ::flight_panel::Instrument >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flight_panel::Instrument >(arena);
}
template<> PROTOBUF_NOINLINE ::flight_panel::AircraftControls* Arena::CreateMaybeMessage< ::flight_panel::AircraftControls >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flight_panel::AircraftControls >(arena);
}
template<> PROTOBUF_NOINLINE ::flight_panel::GameData* Arena::CreateMaybeMessage< ::flight_panel::GameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flight_panel::GameData >(arena);
}
template<> PROTOBUF_NOINLINE ::flight_panel::NavigationSystem* Arena::CreateMaybeMessage< ::flight_panel::NavigationSystem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flight_panel::NavigationSystem >(arena);
}
template<> PROTOBUF_NOINLINE ::flight_panel::HorizontalSituationIndicator* Arena::CreateMaybeMessage< ::flight_panel::HorizontalSituationIndicator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flight_panel::HorizontalSituationIndicator >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
